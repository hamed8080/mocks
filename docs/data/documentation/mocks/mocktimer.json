{
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Mocks\/documentation\/Mocks"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:5Mocks9MockTimerC",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "class"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "MockTimer"
      }
    ],
    "modules" : [
      {
        "name" : "Mocks"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "MockTimer"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Class",
    "symbolKind" : "class",
    "title" : "MockTimer"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "class"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "MockTimer"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "MockTimer",
          "level" : 2,
          "text" : "MockTimer",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "For mocking the timer class just inject an instance of type ",
              "type" : "text"
            },
            {
              "code" : "Additive.TimerProtocol",
              "type" : "codeVoice"
            },
            {
              "text" : " like code below:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "final class ViewModel {",
            "    let timer: TimerProtocol",
            "    init(timer: TimerProtocol) {",
            "        self.timer = timer",
            "    }   ",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Then you have the power to control this instance variable with ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " like:",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "final class TestViewModel: XCTestCase {",
            "    var mockTimer: MockTimer!",
            "    override func setUp() {",
            "        mockTimer = MockTimer()",
            "    }",
            "",
            "    func test_timer() {",
            "        mockTimer.blockResult = { timer in",
            "            XCTAssertTrue(true)",
            "        }",
            "        mockTimer.fire()",
            "    }",
            "}"
          ],
          "syntax" : "swift",
          "type" : "codeListing"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/Mocks\/8Additive13TimerProtocolP"
      ],
      "kind" : "relationships",
      "title" : "Conforms To",
      "type" : "conformsTo"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 3,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/init()"
      ],
      "title" : "Initializers"
    },
    {
      "identifiers" : [
        "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/blockResult",
        "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/isValid"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/fire()",
        "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/invalidateTimer()",
        "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/scheduledTimer(interval:repeats:block:)"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/mocks\/mocktimer"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Mocks/8Additive13TimerProtocolP": {
  "identifier" : "doc:\/\/Mocks\/8Additive13TimerProtocolP",
  "title" : "Additive.TimerProtocol",
  "type" : "unresolvable"
},
"doc://Mocks/documentation/Mocks": {
  "abstract" : [
    {
      "text" : "Mocks is consist of protocols that force you to use them for injection in your classes for the soul of unit-testing.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks",
  "images" : [
    {
      "identifier" : "icon.png",
      "type" : "icon"
    }
  ],
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Mocks",
  "type" : "topic",
  "url" : "\/documentation\/mocks"
},
"doc://Mocks/documentation/Mocks/MockTimer": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "MockTimer"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "MockTimer"
    }
  ],
  "role" : "symbol",
  "title" : "MockTimer",
  "type" : "topic",
  "url" : "\/documentation\/mocks\/mocktimer"
},
"doc://Mocks/documentation/Mocks/MockTimer/blockResult": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "blockResult"
    },
    {
      "kind" : "text",
      "text" : ": (("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8Additive13TimerProtocolP",
      "text" : "TimerProtocol"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ")?"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/blockResult",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "blockResult",
  "type" : "topic",
  "url" : "\/documentation\/mocks\/mocktimer\/blockresult"
},
"doc://Mocks/documentation/Mocks/MockTimer/fire()": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "fire"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/fire()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "fire()",
  "type" : "topic",
  "url" : "\/documentation\/mocks\/mocktimer\/fire()"
},
"doc://Mocks/documentation/Mocks/MockTimer/init()": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "identifier",
      "text" : "init"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/init()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "init()",
  "type" : "topic",
  "url" : "\/documentation\/mocks\/mocktimer\/init()"
},
"doc://Mocks/documentation/Mocks/MockTimer/invalidateTimer()": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "invalidateTimer"
    },
    {
      "kind" : "text",
      "text" : "()"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/invalidateTimer()",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "invalidateTimer()",
  "type" : "topic",
  "url" : "\/documentation\/mocks\/mocktimer\/invalidatetimer()"
},
"doc://Mocks/documentation/Mocks/MockTimer/isValid": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "isValid"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/isValid",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "isValid",
  "type" : "topic",
  "url" : "\/documentation\/mocks\/mocktimer\/isvalid"
},
"doc://Mocks/documentation/Mocks/MockTimer/scheduledTimer(interval:repeats:block:)": {
  "abstract" : [

  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "scheduledTimer"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "interval"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "c:@T@NSTimeInterval",
      "text" : "TimeInterval"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "repeats"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:Sb",
      "text" : "Bool"
    },
    {
      "kind" : "text",
      "text" : ", "
    },
    {
      "kind" : "externalParam",
      "text" : "block"
    },
    {
      "kind" : "text",
      "text" : ": ("
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8Additive13TimerProtocolP",
      "text" : "TimerProtocol"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:s4Voida",
      "text" : "Void"
    },
    {
      "kind" : "text",
      "text" : ") -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:8Additive13TimerProtocolP",
      "text" : "TimerProtocol"
    }
  ],
  "identifier" : "doc:\/\/Mocks\/documentation\/Mocks\/MockTimer\/scheduledTimer(interval:repeats:block:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "scheduledTimer(interval:repeats:block:)",
  "type" : "topic",
  "url" : "\/documentation\/mocks\/mocktimer\/scheduledtimer(interval:repeats:block:)"
},
"icon.png": {
  "alt" : "App icon.",
  "identifier" : "icon.png",
  "type" : "image",
  "variants" : [
    {
      "traits" : [
        "1x",
        "light"
      ],
      "url" : "\/images\/icon.png"
    }
  ]
}
}
}